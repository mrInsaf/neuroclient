--- tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: '#8b5cf6', // Фиолетовый для акцентов
        dark: '#1e293b', // Тёмный фон
        light: '#f8fafc' // Светлый текст
      },
    },
  },
  plugins: [],
};


--- public\index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


--- src\App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


--- src\App.js ---
import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
import Register from "./pages/Register";
import Models from "./pages/Models";
import GenerateModel from "./pages/GenerateModel";

function App() {
  return (
      <Router>
        <Routes>
          <Route path="/" element={<Register />} />
          <Route path="/models" element={<Models />} />
          <Route path="/generate" element={<GenerateModel />} />
        </Routes>
      </Router>
  );
}

export default App;


--- src\App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


--- src\index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;


--- src\index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


--- src\reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


--- src\setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


--- src\pages\GenerateModel.js ---
import { useState } from "react";

const NeuralNetworkPage = () => {
    const [input, setInput] = useState("");
    const [result, setResult] = useState(null);
    const [isLoading, setIsLoading] = useState(false);

    const handleGenerate = async () => {
        setIsLoading(true);
        try {
            const response = await fetch("https://27a2-35-247-38-209.ngrok-free.app/api/generate_model/", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ input }),
            });
            const data = await response.json();
            setResult(data.file || "Error generating model");
        } catch (error) {
            setResult("Error connecting to the server");
        }
        setIsLoading(false);
    };

    return (
        <div className="relative bg-dark min-h-screen flex flex-col">
            <header className="absolute top-6 left-6 text-primary text-4xl font-bold">
                Neuro3D
            </header>

            <div className="flex-grow flex justify-center items-center">
                <div className="w-full max-w-3xl bg-gray-800 text-light p-8 rounded-lg shadow-md relative">
                    {isLoading ? (
                        <div className="text-center text-xl animate-pulse">Generating...</div>
                    ) : result ? (
                        <div className="text-center text-lg">{result}</div>
                    ) : (
                        <div className="text-center text-gray-400">Your generated model will appear here</div>
                    )}
                </div>
            </div>

            <div className="p-4 bg-gray-900">
                <div className="flex justify-center items-center">
                    <input
                        type="text"
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        placeholder="Enter your prompt here..."
                        className="flex-grow max-w-2xl p-3 bg-gray-700 text-light rounded-l-lg focus:outline-none"
                    />
                    <button
                        onClick={handleGenerate}
                        className="p-3 bg-primary text-light rounded-r-lg hover:bg-purple-700"
                    >
                        Generate
                    </button>
                </div>
            </div>
        </div>
    );
};

export default NeuralNetworkPage;


--- src\pages\Models.js ---
import { useEffect, useState } from "react";

const Models = () => {
    // Статический массив для тестовых данных
    const staticModels = [
        { id: 1, name: "Model 1", likes: 10 },
        { id: 2, name: "Model 2", likes: 25 },
        { id: 3, name: "Model 3", likes: 7 },
    ];

    const [models, setModels] = useState(staticModels); // Заменить на [] после тестов

    useEffect(() => {
        // Раскомментировать, если сервер отвечает корректно
        /*
        fetch("http://127.0.0.1:8000/api/generated_models/")
          .then((res) => res.json())
          .then((data) => setModels(data));
        */
    }, []);

    const likeModel = async (id) => {
        // Если сервер не работает, лайки обновляются локально
        setModels((prev) =>
            prev.map((model) => (model.id === id ? { ...model, likes: model.likes + 1 } : model))
        );

        // Раскомментировать, если сервер отвечает корректно
        /*
        await fetch(`http://127.0.0.1:8000/api/generated_models/${id}/like/`, { method: "POST" });
        */
    };

    return (
        <div className="bg-dark min-h-screen p-6 text-light">
            <h1 className="text-primary text-3xl mb-6">Model Ratings</h1>
            <ul className="space-y-4">
                {models.map((model) => (
                    <li
                        key={model.id}
                        className="bg-gray-800 p-4 rounded shadow-md flex justify-between items-center"
                    >
                        <span>{model.name}</span>
                        <div className="flex items-center gap-2">
                            <span>{model.likes} Likes</span>
                            <button
                                className="bg-primary p-2 rounded hover:bg-purple-700"
                                onClick={() => likeModel(model.id)}
                            >
                                Like
                            </button>
                        </div>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default Models;


--- src\pages\Register.js ---
import { useState } from "react";

const Register = () => {
    const [formData, setFormData] = useState({ username: '', email: '', password: '' });

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch("http://127.0.0.1:8000/api/register/", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData),
            });
            if (response.ok) {
                alert("Registration successful!");
            } else {
                alert("Registration failed.");
            }
        } catch (error) {
            console.error("Error:", error);
        }
    };

    return (
        <div className="bg-dark min-h-screen flex items-center justify-center text-light">
            <form
                className="bg-gray-800 p-6 rounded shadow-md w-full max-w-md"
                onSubmit={handleSubmit}
            >
                <h2 className="text-primary text-2xl mb-4">Register</h2>
                <input
                    type="text"
                    name="username"
                    placeholder="Username"
                    className="w-full p-2 mb-3 bg-dark text-light border border-gray-600 rounded"
                    value={formData.username}
                    onChange={handleChange}
                />
                <input
                    type="email"
                    name="email"
                    placeholder="Email"
                    className="w-full p-2 mb-3 bg-dark text-light border border-gray-600 rounded"
                    value={formData.email}
                    onChange={handleChange}
                />
                <input
                    type="password"
                    name="password"
                    placeholder="Password"
                    className="w-full p-2 mb-3 bg-dark text-light border border-gray-600 rounded"
                    value={formData.password}
                    onChange={handleChange}
                />
                <button
                    type="submit"
                    className="bg-primary hover:bg-purple-700 p-2 w-full rounded"
                >
                    Register
                </button>
            </form>
        </div>
    );
};

export default Register;


